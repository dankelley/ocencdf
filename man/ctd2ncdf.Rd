% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ctd.R
\name{ctd2ncdf}
\alias{ctd2ncdf}
\title{Save a ctd object to a netcdf file}
\usage{
ctd2ncdf(x, varTable = NULL, ncfile = NULL, debug = 0)
}
\arguments{
\item{x}{an oce object of class \code{ctd}, as created by e.g. \code{\link[oce:as.ctd]{oce::as.ctd()}}
or \code{\link[oce:read.ctd]{oce::read.ctd()}}.}

\item{varTable}{character value indicating the variable-naming
scheme to be used. If this ends in \code{.yml}, then the file of that
name is opened and processed with \code{\link[yaml:yaml.load]{yaml::yaml.load_file()}}. Otherwise,
the only choice (at the moment) is \code{"argo"}, which causes the
function to work with
\verb{system.file("extdata","argo.yml",package="ocencdf"))}.
If \code{varTable} is not supplied, then a guess will be made by the
lower-level function that \code{\link[=oce2ncdf]{oce2ncdf()}} calls to do the work.}

\item{ncfile}{character value naming the output file.  Use NULL
for a file name to be created automatically (e.g. \code{ctd.nc} for
a CTD object).}

\item{debug}{integer, 0 (the default) for quiet action apart
from messages and warnings, or any larger value to see more
output that describes the processing steps.}
}
\description{
Save a ctd object to a netcdf file
}
\examples{
library(ocencdf)

# example 1: a ctd file with no per-variable QC flags
data(ctd) # from 'oce' package
oce2ncdf(ctd, ncfile="ctd1.nc")
d <- read.netcdf('ctd1.nc') |> as.ctd()
plot(d)

# example 2: a ctd file with per-variable QC flags
data(section) # from 'oce' package
stn <- section[["station", 100]] # 100-th station in section, not station '100'
oce2ncdf(stn, ncfile="ctd2.nc")
d <- read.netcdf('ctd2.nc') |> as.ctd()
plot(d)

# clean up temporary files (to prevent CRAN test failure)
unlink("ctd1.nc")
unlink("ctd2.nc")

}
\author{
Dan Kelley
}
